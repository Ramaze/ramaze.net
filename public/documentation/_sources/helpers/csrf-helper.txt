CSRF Helper
===========

The CSRF helper can be used to protect your applications from 
:abbr:`CSRF (Cross Site Request Forgery)` attacks. Because these attacks can be executed
in a few different ways I highly recommend reading the `Wikipedia`_ article about these
attacks.

The important thing to remember is that you'll *almost* always want to use the CSRF 
helper when you're using some sort of authentication system that grants users access to
dangerous actions such as deleting data from a database. This helper may not be 100% 
bulletproof but it will save you a lot of trouble.

Using the Helper
----------------

As with any other helper you'll first need to load it in your controller(s):

.. code-block:: ruby

  class Posts < Ramaze::Controller
    map '/posts'

    helper :csrf

    def dangerous

    end
  end

Now that the helper is loaded the fun can begin. In order to use the helper we'll have to
add a "before_all" call to our controller:

.. code-block:: ruby

  class Posts < Ramaze::Controller
    map '/posts'

    helper :csrf

    before_all do

    end

    def dangerous

    end
  end

.. warning::

  You should **not** use an after_all call in your controller as by the time this block is
  called the request has already been executed.

This block is called every time a request is made and is executed *before* the actual 
method is executed. This makes it easy to validate the request before executing any
dangerous actions. In order to protect the controller from CSRF attacks we need to add a
call to the method "csrf_protection" in the before_all block:

.. code-block:: ruby

  class Posts < Ramaze::Controller
    map '/posts'

    helper :csrf

    before_all do
      csrf_protection(:dangerous) do

      end
    end

    def dangerous

    end
  end

You might've noticed that the argument of the csrf_protection method matches the name of
the method "dangerous". The arguments sent to the csrf_protection should be the names of
the methods you wish to protect against CSRF attacks. Each method is sent as an extra
parameter to this method.

The content inside the block we've just added will *only* be executed if the request was
invalid. Say we want to abort the request and show an error we'd do the following:

.. code-block:: ruby

  class Posts < Ramaze::Controller
    map '/posts'

    helper :csrf

    before_all do
      csrf_protection(:dangerous) do
        respond("The request was invalid", 401)
      end
    end

    def dangerous
      
    end
  end

Setting Tokens
--------------

Once a method is protected against CSRF attacks using this helper it will require a 
special token to be set for all requests (GET, POST, all of them). This token can either
be set as a query string parameter or as a POST parameter. To make your life easier the
helper provides the method "get_csrf_token". This method generates a new token if the
client doesn't have one yet or use the existing one. You'd normally use this method as
following:

.. code-block:: html

  <form method="post" action="#{Posts.r(:dangerous)}">
    <input type="hidden" name="csrf_token" value="#{get_csrf_token}" />
  </form>

Now whenever this form is submitted the token will be sent to the server and everything
should work just fine.

.. note::

  It's currently not yet possible to change the field name ("csrf_token") to something
  else. Feel free to add a patch to make this possible (hint: use traits).

.. warning::

  The CSRF helper checks the IP address, hostname and user agent of the client that sent
  the request to the server. This means that if a user has a form opened and switches to
  a different IP the token will be invalid.

If you're protecting a method that requires a GET request you'll have to set the token
as a query string parameter::

  http://ramaze.net?csrf_token=XXXXXXX

And that's really about it. The helper is fairly easy to use and should be able to protect
your applications from most CSRF attacks.

.. _Wikipedia: http://en.wikipedia.org/wiki/Cross-site_request_forgery/
.. _Ruby on Rails: http://rubyonrails.org/
