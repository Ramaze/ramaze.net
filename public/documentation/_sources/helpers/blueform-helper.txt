Blueform Helper
===============

Creating forms can sometimes be a pain, especially when you want to automatically fill in
fields based on a certain data source or show error messages. The Blueform helper tries to
make it as easy as possible for developers to create forms. As with any other helper 
you'll first have to load it before you can use it:

.. code-block:: ruby

  class Posts < Ramaze::Controller
    map '/'

    helper :blue_form

    def edit
      @user = User[1]
    end

    def save
      User[1].update(request.params)
      redirect_referrer
    end
  end

This helper, unlike other helpers, shouldn't be used inside a controller but instead
inside a view. While you can actually call the methods in a controller this will most
likely confuse other developers. Assuming we have a view called "edit.xhtml" the most 
basic code required for a form can be seen below.

.. code-block:: ruby

  form_for(@user, :method => :post, :action => Posts.r(:save)) do |form|

  end

This code would result in the following HTML being generated:

.. code-block:: html

  <form method="post" action="/save">

  </form>

.. note::

  It's important to remember that the form_for() method *returns* the content rather than
  directly outputting it. This means that you'll have to do this manually. If you're using
  Etanni as a template engine you'll have to wrap the entire form_for() call in the tags
  #{ and }.

The form_for method is used to create the basic elements of the form as well as rendering
all elements created in the block using the "form" objet. The first argument should be an
object containing the data for all fields. If you have a field named "username" you'd want
to have a public attribute (these can be set using attr_reader methods) with the same name.

The block that was specified is used to render the contents inside the form such as input
fields, buttons and so on. Let's add a field called "name".

.. code-block:: ruby

  form_for(@user, :method => :post, :action => Posts.r(:save)) do |form|
    form.input_text('Name', :name)
  end

No whenever the @user object contains an attribute with the name of "name" it's value will
be used to fill the input field that was just added to the form. If the object doesn't 
have a matching attribute it will simply be ignored.

A full list of available methods can be found `here`_.

.. _here: http://doc.rubyists.com/ramaze+innate/Ramaze/Helper/BlueForm.html

Displaying Errors
-----------------

Not only does the Blueform helper make it easier for you to create fields it also makes it
extremely easy to show error messages whenever a form contained incorrect data. In order
to use this feature the objects used in the form_for() method should respond to a method
called "errors" *or* the flashdata should contain a key "form_errors" with all the errors
in it (usually extracted from the object when submitting the form data to another method).

.. note::

  If you're using Sequel as your database toolkit your objects will already have an 
  attribute called "errors" so there's nothing you need to do. If you're using other 
  toolkits you might need to add it manually.

These error messages should have the following format:

.. code-block:: ruby

  { :field_name => "Error message goes in here" }

If you want to manually add errors you can do so using the "form_error" method:

.. code-block:: ruby

  form_error(:name, "The specified name is invalid.")
